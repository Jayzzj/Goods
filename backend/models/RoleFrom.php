<?php
/**
 * Created by PhpStorm.
 * User: 周子健
 * Date: 2017/8/18
 * Time: 15:37
 */

namespace backend\models;


use yii\base\Model;

class RoleFrom extends Model
{
    public $name;
    public $description;
    public $parmission;
    const SCENARIO_ADD = 'add';
    const SCENARIO_EDIT = 'edit';

    public function rules()
    {
        return [
            [['name','description','parmission'],'required'],
            ['parmission','safe'],//权限可选
            ['parmission','required','on'=>[self::SCENARIO_ADD,self::SCENARIO_EDIT]],
        ];
    }

    public function attributeLabels()
    {
        return [
            'name' => '角色名称',
            'description' => '角色描述',
            'parmission' => '权限',

        ]; // TODO: Change the autogenerated stub
    }

    //获取所有权限的方法
    public function getParmissionsitems()
    {
        //获取所有权限对象
        $parmissions = \Yii::$app->authManager->getPermissions();
        //转换为数组
        return \yii\helpers\ArrayHelper::map($parmissions,'name','description');
    }

    public function RoleAdd()
    {
        //实例authManager组件
        $authManager = \Yii::$app->authManager;
        //判定当前对象是否存在
        if ($authManager->getRole($this->name)){
            //添加错误信息
            $this->addError('name','角色已存在');
            return false;
        }else{
            //创建角色
            $adminRole = \Yii::$app->authManager->createRole($this->name);
            //添加描述
            $adminRole->description = $this->description;
            //添加角色
            $authManager->add($adminRole);
            //判定是否给予权限
            if (is_array($this->parmission)){
                //给角色分配权限
                foreach ($this->parmission as $parmissionName){
                    //循环获取权限
                    $parmission = $authManager->getPermission($parmissionName);
                    //循环分配权限
                    $authManager->addChild($adminRole,$parmission);
                }
            }
            return true;
        }
    }

    public function Roleedit($name)
    {
        //实例authManager组件
        $authManager = \Yii::$app->authManager;
        //获取角色对象
        $role = \Yii::$app->authManager->getRole($name);
        //给角色赋值
        $role->name = $this->name;
        $role->description = $this->description;
        //修改角色
        \Yii::$app->authManager->update($name,$role);
        //判定是否是数组
       if (is_array($this->parmission)){
             //清除所有权限
             $authManager->removeChildren($role);
             //循环给角色添加权限
             foreach ($this->parmission as $parmissionName){
                 //获取权限对象
                 $parmission = $authManager->getPermission($parmissionName);
                 //添加到角色
                 $authManager->addChild($role,$parmission);
             }
         }
    }

    public function Adminroleadd($roles,$adminid)
    {
        //实例authManager组件
        $authManager = \Yii::$app->authManager;

        if (is_array($roles)){
            //遍历
            foreach ($roles as $role){
                //循环给用户分配角色
                $authManager->assign($authManager->getRole($role),$adminid);
            }
            return true;
        }
    }

    public function Adminroleedit($roles,$adminid)
    {
        $authManager = \Yii::$app->authManager;//实例authManager组件
        if (is_array($roles)){//判定是否修改权限
            $authManager->revokeAll($adminid);//清除该用户关联的所有角色
            foreach ($roles as $role){//循环给该用户添加角色
                //给管理员分配角色
                $authManager->assign($authManager->getRole($role),$adminid);
            }
            return true;
        }

    }


}
//$adminRole = $authManager->getRole('管理员');
////获取权限
//$addPermission = $authManager->getPermission('admin/add');
//$authManager->addChild($adminRole,$addPermission);//角色，权限

